import React, {	useReducer,	useState,	useEffect,	useLayoutEffect,} from 'react';import {	StyleSheet,	View,	RefreshControl,} from 'react-native';import {Icon, Button } from '@ui-kitten/components';import {	KeyboardAwareFlatList,} from 'react-native-keyboard-aware-scroll-view';import Service from '~/components/GoInForm/Service';import {color, shadowStyle } from '~/config';import { create_UUID } from '~/utils';const reducer = (prevState, { type, value }) => {	switch (type) {		case 'SET_STATE':			return {				...prevState,				...value,			};		case 'ADD_BLANK_ITEM':			return {				...prevState,				listService: [					...prevState.listService,					{ id: `${create_UUID()}`, name: '', price: '' },				],			};		case 'REMOVE_ITEM_BY_INDEX':			return {				...prevState,				listService: RemoveItemByindex({					index: value,					array: prevState.listService,				}),			};		case 'UPDATE_ITEM_BY_INDEX':			return {				...prevState,				listService: updateItemByindex({					index: value.index,					item: value.item,					array: prevState.listService,				}),			};		default:			return prevState;	}};function updateItemByindex({ index, item, array }) {	for (var i in array) {		if (i == index) {			array[i] = { id: array[i].id, ...item };			break;		}	}	return array;}function RemoveItemByindex({ index, array }) {	array.splice(index, 1);	return array;}const initialState = {	listService: [],};const ServiceList = props => {	const [state, dispatch] = useReducer(reducer, initialState);	useEffect(() => {		loadCurrentService();		return () => {};	}, []);	useEffect(() => {		!!props.onChange && props.onChange(state.listService);	}, [state]);	const localController = React.useMemo(		() => ({			updateState: (value) => {				dispatch({ type: 'SET_STATE', value });			},			pushNewItem: (value) => {				dispatch({ type: 'ADD_BLANK_ITEM' });			},			removeByIndex: (index) => {				console.log('removeByIndex', index);				dispatch({ type: 'REMOVE_ITEM_BY_INDEX', value: index });			},			onChangeByIndex: (index, value) => {				console.log(index, value);				dispatch({					type: 'UPDATE_ITEM_BY_INDEX',					value: {						index,						item: value,					},				});			},		}),		[]	);	const loadCurrentService = () => {		const sampleData = [];		localController.updateState({ listService: sampleData });	};	const _onPressAdd = () => {		localController.pushNewItem();	};	const _renderItem = ( item, index ) => {		// item:{name: '', price: ''}		return (			<View style={{ paddingHorizontal: 5 }} key={`${item.id}-${index}`}>				<Service					initialState={item}					onDelete={() => localController.removeByIndex(index)}					// onChangeValue={( value )=> localController.onChangeByIndex(index, value)}					onChangeValue={(value) => localController.onChangeByIndex(index, value)}				/>			</View>		);	};	return (		<>			{				state.listService.map( _renderItem )			}			<View style={{ paddingHorizontal: 10 }}>				<Button					appearance="outline"					status="info"					style={[styles.btn, { marginBottom: 5 }]}					onPress={_onPressAdd}					accessoryLeft={(props) => (						<Icon name="plus-outline" {...props} />					)}>					Thêm dịch vụ				</Button>			</View>	</>	);};export default ServiceList;const styles = StyleSheet.create({	container: {		flex: 1,		backgroundColor: color.bgmain,	},	btnUpdate: {		borderRadius: 6,		justifyContent: 'center',		minHeight: 48,		textTransform: 'uppercase',	},	secWrap: {		backgroundColor: '#fff',		marginHorizontal: 15,		marginBottom: 30,		padding: 10,		paddingVertical: 5,		borderRadius: 6,		minHeight: 50,		...shadowStyle,	},	subTitle: {		paddingHorizontal: 15,		marginBottom: 10,		fontSize: 16,		color: '#3C3C43',		textTransform: 'uppercase',		opacity: 0.6,	},});