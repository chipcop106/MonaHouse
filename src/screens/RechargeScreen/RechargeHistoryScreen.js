import React, { useContext, useEffect, useState } from 'react'import { View, StyleSheet, Alert, RefreshControl } from 'react-native'import PropTypes from 'prop-types'import { useRoute } from '@react-navigation/native'import moment from 'moment'import { Context as AuthContext } from '~/context/AuthContext'import HistoryRecord from '../RoomScreen/ListItems/HistoryMoney'import FilterHeader from '../RoomScreen/FilterHeaderTime';import { settings, color } from '~/config';import { List, Spinner } from '@ui-kitten/components'import { KeyboardAwareFlatList } from 'react-native-keyboard-aware-scroll-view'import { getRechargeHistory } from '~/api/CustomerAPI';import dayjs from 'dayjs';RechargeHistoryScreen.propTypes = {}function RechargeHistoryScreen (props) {	const route = useRoute();	const { signOut } = useContext(AuthContext);	const [filterState, setFilterState] = useState({		selectedMonthIndex:			settings?.monthLists?.findIndex(				(item) => moment().format('M') === `${item.replace('Tháng', '').trim()}`			)  ?? 0,		selectedYearIndex:			settings?.yearLists?.findIndex(				(item) => moment().format('YYYY') === `${item}`			) ?? 0,	});	const [isLoading, setIsLoading] = useState(false);	const [listHistory, setListHistory] = useState(null);	const [refreshing, setRefreshing] = useState(false);	useEffect(() => {		(async () => {			setIsLoading(true);			await fetchData(filterState);			setIsLoading(false);		})();	}, []);	const fetchData = async (newFilter) => {		// setListHistory([{ NameRoom: '' ,		// 	Note: 'Nap tien  ACB',		// 	Paid: 300000,		// 	CreatedDate:'2020-09-18T20:51:05.257'}]);		const { selectedMonthIndex, selectedYearIndex } = newFilter;		const params = {			fromdate: `01/${				selectedMonthIndex + 1 >= 10 ? selectedMonthIndex + 1 : `0${selectedMonthIndex + 1}`			}/${settings?.yearLists[selectedYearIndex]}`,			todate: `${moment().format('DD/MM/YYYY')}`,			type: 0,			pageSize: 1000,			pageIndex: 1,			sort: 1,		};		console.log(params);		try {			const res = await getRechargeHistory({ ...params });			console.log(res);			if (res.Code === 1) {				setListHistory(res.Data);			} else if (res.Code === 0) {				Alert.alert('Oops!!', JSON.stringify(res));				setListHistory([]);			} else if (res.Code === 2) {				signOut();				Alert.alert('Phiên đăng nhập đã hết, vui lòng đăng nhập lại !!');			}		} catch (e) {			console.log('loadData error', e);			Alert.alert('Oops!!', JSON.stringify(e));		}	}	const onFilterChange = async (filter) => {		setFilterState(filter);		setIsLoading(true);		await fetchData(filter);		setIsLoading(false);	};	const _onRefresh = async () => {		setRefreshing(true);		await fetchData(filterState);		setRefreshing(false);	};	return (		<>			<FilterHeader				onValueChange={onFilterChange}				initialState={filterState}				advanceFilter={false}				yearFilter={true}				houseFilter={false}			/>			{!isLoading ? (				<List					refreshControl={						<RefreshControl refreshing={refreshing} onRefresh={_onRefresh} />					}					contentContainerStyle={styles.contentContainer}					data={listHistory}					keyExtractor={(item, index) => `${index}-${item.ID}`}					renderItem={({item}) => {						return <HistoryRecord style={styles.card} data={ {							NameRoom:  '',							Note: item?.note ?? '',							Paid: ( item?.amount ?? 0 ) + ( item?.amountPromo ?? 0 ),							CreatedDate: item?.createdDate ?? dayjs().format('YYYY-MM-DDTHH:mm:ss')						} } />					}}					style={styles.container}				/>			) : (				<View					style={{						flexGrow: 1,						justifyContent: 'center',						alignItems: 'center',					}}>					<Spinner size="giant" status="primary" />				</View>			)}		</>	)}const styles = StyleSheet.create({	container:{		flex: 1,		backgroundColor: color.bgmain	},	contentContainer: {		padding: 15	}})export default RechargeHistoryScreen