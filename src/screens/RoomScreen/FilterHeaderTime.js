import React, {	useContext,	useEffect,	useState,	memo,	useReducer,} from "react";import { View, StyleSheet, TouchableOpacity, Text } from "react-native";import { Icon, Input } from "@ui-kitten/components";import { color, settings } from "~/config";import ModalizeSelect from "~/components/common/ModalizeSelect";const reducer = (prevstate, { type, payload }) => {	switch (type) {		case "STATE_CHANGE": {			return {				...prevstate,				[payload.key]: payload.value,			};		}		default:			return prevstate;	}};const FilterHeader = ({	onValueChange,	initialState,	loading,}) => {	const [state, dispatch] = useReducer(reducer, initialState);	const { selectedMonthIndex,  selectedYearIndex } = state;	const _getSelectedIndex = (key) => {		return (index) => {			console.log(key, index);			dispatch({ type: "STATE_CHANGE", payload: { key, value: index } });		};	};	useEffect(() => {		onValueChange(state);	}, [selectedMonthIndex, selectedYearIndex]);	return (		<View style={styles.filterWrap}>			<View style={styles.filterSelect}>				{/*<View style={{ height: 40, justifyContent: "center" }}><Text > Tá»« </Text></View>*/}				<View					style={[styles.filter, styles.firstFilter, { position: "relative" }]}				>					<View style={[StyleSheet.absoluteFill]}>						<ModalizeSelect							disabled={loading}							onChange={_getSelectedIndex('selectedMonthIndex')}							pickerData={[...settings.monthLists]}							selectedValue={								[...settings.monthLists][selectedMonthIndex || 0]							}							leftIcon="log-in-outline"						/>					</View>				</View>				<View					style={[styles.filter, styles.secondFilter, { position: "relative" }]}				>					<View style={[StyleSheet.absoluteFill]}>						<ModalizeSelect							disabled={loading}							onChange={_getSelectedIndex("selectedYearIndex")}							pickerData={settings.yearLists}							selectedValue={								settings.yearLists[selectedYearIndex || 0]							}							leftIcon="calendar"						/>					</View>				</View>			</View>		</View>	);};export default memo(FilterHeader);const styles = StyleSheet.create({	filterWrap: {		padding: 10,		paddingBottom: 0,		backgroundColor: color.darkColor,	},	filterSelect: {		flexDirection: "row",		flexWrap: "wrap",		// alignItems: "center"	},	filter: {		flexGrow: 1,		marginBottom: 10,		minHeight: 40,		paddingRight: 30,	},	fullWidth: {		width: "100%",	},	firstFilter: {		marginRight: 5,	},	secondFilter: {		marginLeft: 5,	},	filterSearch: {		flexGrow: 1,		marginBottom: 10,	},	searchIcon: {		width: 20,		height: 20,	},	buttonFilter: {		backgroundColor: "rgba(65,63,98,1)",		marginLeft: 10,		justifyContent: "center",		paddingHorizontal: 10,		borderRadius: 4,		marginBottom: 10,	},});