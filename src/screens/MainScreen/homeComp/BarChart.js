import React, { useContext, useEffect, useState, useRef } from 'react';import {  StyleSheet,  processColor,} from 'react-native';import { BarChart } from 'react-native-charts-wrapper';import { randomDataChart, renderNumberByArray } from '~/utils';import { color } from '~/config'const configs = {	drawValues: true,	colors: [processColor(color.primary)],	valueTextSize: 12,	valueTextColor: processColor('black'),	valueFormatter: `#.###`,};const xAxisConfig = {  valueFormatter: [    'Jan',    'Feb',    'Mar',    'Apr',    'May',    'Jun',    'Jul',    'Aug',    'Oct',    'Sep',    'Nov',    'Dec',  ],  granularityEnabled: true,  granularity: 1,  drawLabels: true,  drawAxisLine: false,  drawGridLines: false,  position: 'BOTTOM',  textColor: processColor('#000'),  textSize: 14,  axisMinimum: 0,  axisMaximum: 12,  labelCount: 12,  centerAxisLabels: false,  avoidFirstLastClipping: true,  enabled: true,};const yAxisConfig = {  left:{	  enabled: false,	  position: 'OUTSIDE_CHART',	  drawLabels: false,	  drawAxisLine: false,	  drawGridLines: true,	  gridColor: processColor('#e1e1e1'),	  gridLineWidth: 1,	  textColor: processColor('#000'),	  textSize: 12,	  granularityEnabled: true,	  granularity: 1,	  labelCountForce: false,	  labelCount: 6,	  drawLimitLinesBehindData: true,  },	right:{		enabled: false,	}};const legendConfig = {	textSize: 14,}const MotelBarChart = (props) => {  const { data } = props;  useEffect(() => {  }, [data]);  const renderChartData = () => {	  let ChartData = {		  dataSets: [			  {				  label: '319 C16 Lý Thường Kiệt',				  values: randomDataChart(12, 0, 20, false),				  configs			  },			  {				  label: '64 Út Tịch',				  values: randomDataChart(12, 0, 20, false),				  configs			  },		  ],		  config: {			  barWidth: 0.15,			  valueTextSize: 32,			  group: {				  barSpace: 0.1,				  fromX: 0,				  groupSpace: 0.5,			  },		  },	  };	  try {		  let dataSets = [];		  if(data.length > 1){		  	let arrayValue = [];			  for(let i = 0;  i <= 11; i++ ){			    let tmp = 0;				  data.map((item) => {					  tmp = tmp + item.dataRevenue[i];				  });				  tmp = tmp / 1000000;				  arrayValue.push(tmp);			  }			  dataSets[0] = {				  label: 'Tất cả nhà',				  config: configs,				  values: arrayValue,			  };		  } else {			  data.map((item) => {				  dataSets.push({					  label: item.motelName,					  values: item.dataRevenue.map(item => item/1000000),					  config: configs,				  });			  });		  }		  ChartData.dataSets = dataSets;		  console.log('ChartData.dataSets' , ChartData.dataSets);	  } catch (e) {		  console.log('MotelBarChart error', e);	  }	  return ChartData;  }  return (	  <BarChart			  style={styles.chart}			  data={renderChartData()}			  xAxis={xAxisConfig}			  yAxis={yAxisConfig}			  legend={legendConfig}			  marker={{				  enabled: true,			  }}	  />  );};export default MotelBarChart;const styles = StyleSheet.create({  chart: {    flex: 1,  },});